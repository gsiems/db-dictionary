package template

import (
	"fmt"
	"path"
	"strings"

	m "github.com/gsiems/db-dictionary/model"
)

func pageHeader(i int, md *m.MetaData) string {

	b := ""

	// resolve the css files
	var css []string
	if md.Cfg.CSSFiles != "" {
		x := strings.Split(md.Cfg.CSSFiles, ",")
		for _, v := range x {
			css = append(css, path.Base(v))
		}
	}
	// if no custom css specified then use the default
	if len(css) == 0 {
		css = append(css, "blues.css")
	}

	switch i {
	case 1, 2:
		ri := ""
		si := ""

		switch i {
		case 1:
			ri = "../"
			si = ""
		case 2:
			ri = "../../"
			si = "../"
		}

		dom := ""
		if len(md.Domains) > 0 {
			dom = `
      <a href="` + si + `domains.html">Domains</a>`
		}

		deps := ""
		if len(md.Dependencies) > 0 {
			dom = `
      <a href="` + si + `dependencies.html">Dependencies</a>`
		}

		//class="active"

		var ci []string
		for _, v := range css {
			ci = append(ci, `    <link rel="stylesheet" href="`+ri+`css/`+v+`" type="text/css">`)
		}

		b = fmt.Sprintf(`<!DOCTYPE html>
<html>
  <head>
    <meta charset="UTF-8">
    <title>{{.Title}}</title>
`+strings.Join(ci, "\n")+`
    <script type="text/javascript" src="`+ri+`js/filter.js"></script>
    <script type="text/javascript" src="`+ri+`js/sort.js"></script>
  </head>
  <body>
    <div id="topNav">
      <a href="`+ri+`index.html">Schemas</a>
      <a href="`+si+`columns.html">Columns</a>
      <a href="`+si+`constraints.html">Constraints</a>%s%s
      <a href="`+si+`tables.html">Tables</a>
      <a href="`+si+`odd-things.html">Odd things</a>
    </div>`, dom, deps)

	default:

		var ci []string
		for _, v := range css {
			ci = append(ci, `    <link rel="stylesheet" href="css/`+v+`" type="text/css">`)
		}

		b = `<!DOCTYPE html>
<html>
  <head>
    <meta charset="UTF-8">
    <title>{{.Title}}</title>
` + strings.Join(ci, "\n") + `
    <script type="text/javascript" src="js/filter.js"></script>
    <script type="text/javascript" src="js/sort.js"></script>
  </head>
  <body>
<!--    <div id="topNav">
      <a class="active" href="index.html">Schemas</a>
    </div> -->`
	}

	return b
}

func sectionHeader(s string) string {
	return fmt.Sprintf(`
      <h2>%s</h2>`, s)
}

func pageFooter(i int, md *m.MetaData) string {

	var js []string

	if md.Cfg.JSFiles != "" {

		ri := ""

		switch i {
		case 1:
			ri = "../"
		case 2:
			ri = "../../"
		}

		// resolve the js files
		x := strings.Split(md.Cfg.JSFiles, ",")
		for _, v := range x {
			js = append(js, `    <script type="text/javascript" src="`+ri+`js/`+path.Base(v)+`"></script>`)
		}
	}

	return fmt.Sprintf(`
    </div>
    <div id="pageFoot">Generated by <a href="https://github.com/gsiems/db-dictionary">db-dictionary</a></div>
    <br />
` + strings.Join(js, "\n") + `
  </body>
</html>
`)

}

func reportHead(showSchema, showTable, showRowcount, showFilter bool) string {

	var schemaTxt string
	var tableTxt string
	var rowCount string
	var filter string

	if showSchema {
		schemaTxt = `
        <div class="headingLabel">Schema:</div><div class="headingItem">{{.SchemaName}}</div>{{if .SchemaComment}}
        <div class="headingLabel"></div><div class="headingItem">{{.SchemaComment|safeHTML}}</div>{{end}}`
	}
	if showTable {
		tableTxt = `
        <div class="headingLabel">Table:</div><div class="headingItem">{{.TableName}}</div>
        <div class="headingLabel">Table Type:</div><div class="headingItem">{{.TableType}}</div>{{if .TableComment}}
        <div class="headingLabel"></div><div class="headingItem">{{.TableComment|safeHTML}}</div>{{end}}`
	}
	if showRowcount {
		rowCount = `
        <div class="headingLabel">Row Count:</div><div class="headingItem">{{.RowCount}}</div>`
	}

	if showFilter {
		filter = `
        <div class="headingLabel">Filter:</div><div class="headingItem"><form id="filter-form" onsubmit="return false;"><input name="filter" id="filterBy" value="" maxlength="32" size="32" type="text" onkeyup="filterTables()"></form></div>`
	}

	return `
    <div id="pageHead"><h1>{{.Title}}</h1>
      <div class="headingContainer">
        <div class="headingLabel">Generated:</div><div class="headingItem">{{.TmspGenerated}}</div>{{if .DBMSVersion}}
        <div class="headingLabel">Database Version:</div><div class="headingItem">{{.DBMSVersion}}</div>{{end}}
        <div class="headingLabel">Database:</div><div class="headingItem">{{.DBName}}</div>{{if .DBComment}}
        <div class="headingLabel"></div><div class="headingItem">{{.DBComment|safeHTML}}</div>{{end}}` + schemaTxt + tableTxt + rowCount + filter + `
      </div>
    </div>`
}

func tpltSchemas() string {
	return reportHead(false, false, false, true) + `
    <div id="pageBody">
      <br/>
      <table width="100.0%" id="dataTableSchema" class="dataTable">
        <thead>
        <tr>
          <th data-type="string">Schema</th>
          <th data-type="string">Owner</th>
          <th data-type="string">Comment</th>
        </tr>
        </thead>
        <tbody>{{range .Schemas}}
          <tr>
            <td><a href="{{.Name}}/tables.html">{{.Name}}</a></td>
            <td>{{.Owner}}</td>
            <td>{{.Comment|safeHTML}}</td>
          </tr>{{end}}
        <tbody>
      </table>
      <script>
      dataTableSchema.onclick = function(e) {
        sortTable(dataTableSchema, e);
      };
      </script>
      <br />`
}

func tpltSchemaTables() string {
	return reportHead(true, false, false, true) + `
    <div id="pageBody">
      <br/>
      <table width="100.0%" id="dataTableTab" class="dataTable">
        <thead>
        <tr>
          <th data-type="string">Table</th>
          <th data-type="string">Owner</th>
          <th data-type="string">Type</th>
          <th data-type="number">Rows</th>
          <th data-type="string">Comment</th>
        </tr>
        </thead>
        <tbody>{{range .Tables}}
          <tr>
            <td><a href="tables/{{.Name}}.html">{{.Name}}</a></td>
            <td>{{.Owner}}</td>
            <td>{{.TableType}}</td>
            <td class="tcn">{{.RowCount}}</td>
            <td>{{.Comment|safeHTML}}</td>
          </tr>{{end}}
        <tbody>
      </table>
      <script>
      dataTableTab.onclick = function(e) {
        sortTable(dataTableTab, e);
      };
      </script>
      <br />`
}

func tpltSchemaDependencies() string {
	return reportHead(true, false, false, false) + `
    <div id="pageBody">
      <br/>
      {{ if .Files }}{{range .Files}}<a href="{{.File}}">{{.Format}}</a> {{end}}
      <img width="100%" class="graph-image" src="dependencies.svg" alt="Dependencies Graph">{{end}}
      <br />`
}

func tpltSchemaDomains() string {
	return reportHead(true, false, false, true) + `
    <div id="pageBody">
      <br/>
      <table width="100.0%" id="dataTableDom" class="dataTable">
        <thead>
        <tr>
          <th data-type="string">Name</th>
          <th data-type="string">Data Type</th>
          <th data-type="string">Default</th>
          <th data-type="string">Comment</th>
        </tr>
        </thead>
        <tbody>{{range .Domains}}
          <tr>
            <td>{{.Name}}</td>
            <td>{{.DataType}}</td>
            <td>{{.Default}}</td>
            <td>{{.Comment|safeHTML}}</td>
          </tr>{{end}}
        <tbody>
      </table>
      <script>
      dataTableDom.onclick = function(e) {
        sortTable(dataTableDom, e);
      };
      </script>
      <br />`
}

func tpltSchemaColumns() string {
	return reportHead(true, false, false, true) + `
    <div id="pageBody">
      <br/>
      <table width="100.0%" id="dataTableCol" class="dataTable">
        <thead>
        <tr>
          <th data-type="string">Table</th>
          <th data-type="string">Column</th>
          <th data-type="number">Position</th>
          <th data-type="string">Data Type</th>
          <th data-type="string">Nulls</th>
          <th data-type="string">Default</th>
          <th data-type="string">Comment</th>
        </tr>
        </thead>
        <tbody>{{range .Columns}}
          <tr>
            <td><a href="tables/{{.TableName}}.html">{{.TableName}}</a></td>
            <td>{{.Name}}</td>
            <td class="tcn">{{.OrdinalPosition}}</td>
            <td>{{.DataType}}</td>
            <td class="tcc">{{.IsNullable|checkMark}}</td>
            <td>{{.Default}}</td>
            <td>{{.Comment|safeHTML}}</td>
          </tr>{{end}}
        <tbody>
      </table>
      <script>
      dataTableCol.onclick = function(e) {
        sortTable(dataTableCol, e);
      };
      </script>
      <br />`
}

func tpltSchemaConstraintsHeader() string {
	return reportHead(true, false, false, true) + `
    <div id="pageBody">`
}

func tpltSchemaCheckConstraints() string {
	return `
      <table width="100.0%" id="dataTableChk" class="dataTable">
        <thead>
        <tr>
          <th data-type="string">Table</th>
          <th data-type="string">Constraint</th>
          <th data-type="string">Search Condition</th>
          <th data-type="string">Status</th>
          <th data-type="string">Comment</th>
        </tr>
        </thead>
        <tbody>{{range .CheckConstraints}}
          <tr>
            <td><a href="tables/{{.TableName}}.html">{{.TableName}}</a></td>
            <td>{{.Name}}</td>
            <td>{{.CheckClause}}</td>
            <td>{{.Status}}</td>
            <td>{{.Comment|safeHTML}}</td>
          </tr>{{end}}
        <tbody>
      </table>
      <script>
      dataTableChk.onclick = function(e) {
        sortTable(dataTableChk, e);
      };
      </script>
      <br />`
}

func tpltSchemaUniqueConstraints() string {
	return `
      <table width="100.0%" id="dataTableUniq" class="dataTable">
        <thead>
        <tr>
          <th data-type="string">Table</th>
          <th data-type="string">Constraint</th>
          <th data-type="string">Columns</th>
          <th data-type="string">Status</th>
          <th data-type="string">Comment</th>
        </tr>
        </thead>
        <tbody>{{range .UniqueConstraints}}
          <tr>
            <td><a href="tables/{{.TableName}}.html">{{.TableName}}</a></td>
            <td>{{.Name}}</td>
            <td>{{.Columns}}</td>
            <td>{{.Status}}</td>
            <td>{{.Comment|safeHTML}}</td>
          </tr>{{end}}
        <tbody>
      </table>
      <script>
      dataTableUniq.onclick = function(e) {
        sortTable(dataTableUniq, e);
      };
      </script>
      <br />`
}

func tpltSchemaFKConstraints() string {
	return `
      <table width="100.0%" id="dataTableFK" class="dataTable">
        <thead>
        <tr>
          <th data-type="string">Table</th>
          <th data-type="string">Constraint</th>
          <th data-type="string">Columns</th>
          <th data-type="string">Is Indexed</th>
          <th data-type="string">Referenced Table</th>
          <th data-type="string">Referenced Columns</th>
          <th data-type="string">On Update</th>
          <th data-type="string">On Delete</th>
          <th data-type="string">Comment</th>
        </tr>
        </thead>
        <tbody>{{range .ParentKeys}}
          <tr>
            <td><a href="tables/{{.TableName}}.html">{{.TableName}}</a></td>
            <td>{{.Name}}</td>
            <td>{{.TableColumns}}</td>
            <td class="tcc">{{.IsIndexed|checkMark}}</td>
            <td>{{.RefSchemaName}}.<a href="../{{.RefSchemaName}}/tables/{{.RefTableName}}.html">{{.RefTableName}}</a>
            <td>{{.RefTableColumns}}</td>
            <td>{{.UpdateRule}}</td>
            <td>{{.DeleteRule}}</td>
            <td>{{.Comment|safeHTML}}</td>
          </tr>{{end}}
        <tbody>
      </table>
      <script>
      dataTableFK.onclick = function(e) {
        sortTable(dataTableFK, e);
      };
      </script>
      <br />`
}

func tpltTableHead(tabType string) string {

	switch tabType {
	case "TABLE", "BASE TABLE", "MATERIALIZED VIEW":
		return reportHead(true, true, true, true) + `
    <div id="pageBody">`
	}

	return reportHead(true, true, false, true) + `
    <div id="pageBody">`

}

func tpltTableColumns(tabType string) string {
	switch tabType {
	case "VIEW", "BASE TABLE", "MATERIALIZED VIEW":
		return `
      <table width="100.0%" id="dataTableCol" class="dataTable">
        <thead>
        <tr>
          <th data-type="string">Column</th>
          <th data-type="number">Position</th>
          <th data-type="string">Data Type</th>
          <th data-type="string">Comment</th>
        </tr>
        </thead>
        <tbody>{{range .Columns}}
          <tr>
            <td>{{.Name}}</td>
            <td class="tcn">{{.OrdinalPosition}}</td>
            <td>{{.DataType}}</td>
            <td>{{.Comment|safeHTML}}</td>
          </tr>{{end}}
        <tbody>
      </table>
      <script>
      dataTableCol.onclick = function(e) {
        sortTable(dataTableCol, e);
      };
      </script>
      <br />`
	default:
		return `
      <table width="100.0%" id="dataTableCol" class="dataTable">
        <thead>
        <tr>
          <th data-type="string">Column</th>
          <th data-type="number">Position</th>
          <th data-type="string">Data Type</th>
          <th data-type="string">Nulls</th>
          <th data-type="string">Default</th>
          <th data-type="string">Comment</th>
        </tr>
        </thead>
        <tbody>{{range .Columns}}
          <tr>
            <td>{{.Name}}</td>
            <td class="tcn">{{.OrdinalPosition}}</td>
            <td>{{.DataType}}</td>
            <td class="tcc">{{.IsNullable|checkMark}}</td>
            <td>{{.Default}}</td>
            <td>{{.Comment|safeHTML}}</td>
          </tr>{{end}}
        <tbody>
      </table>
      <script>
      dataTableCol.onclick = function(e) {
        sortTable(dataTableCol, e);
      };
      </script>
      <br />`
	}
}

func tpltTableConstraintsHeader() string {
	return `
      <table width="100.0%" id="dataTableCons" class="dataTable">
        <thead>
        <tr>
          <th data-type="string">Name</th>
          <th data-type="string">Type</th>
          <th data-type="string">Columns</th>
          <th data-type="string">Search Condition</th>
          <th data-type="string">Status</th>
          <th data-type="string">Comment</th>
        </tr>
        </thead>
        <tbody>`
}

func tpltTableConstraintsFooter() string {
	return `
        </tbody>
      </table>
      <script>
      dataTableCons.onclick = function(e) {
        sortTable(dataTableCons, e);
      };
      </script>
      <br />`
}

func tpltTableCheckConstraints() string {
	return `{{range .CheckConstraints}}
          <tr>
            <td class="tcnw">{{.Name}}</td>
            <td class="tcnw">Check</td>
            <td class="tcnw"></td>
            <td class="tcnw">{{.CheckClause}}</td>
            <td class="tcnw">{{.Status}}</td>
            <td>{{.Comment|safeHTML}}</td>
          </tr>{{end}}`
}

func tpltTablePrimaryKey() string {
	return `{{range .PrimaryKeys}}
          <tr>
            <td class="tcnw">{{.Name}}</td>
            <td class="tcnw">Primary Key</td>
            <td class="tcnw">{{.Columns}}</td>
            <td class="tcnw"></td>
            <td class="tcnw"></td>
            <td>{{.Comment|safeHTML}}</td>
          </tr>{{end}}`
}

func tpltTableUniqueConstraints() string {
	return `{{range .UniqueConstraints}}
          <tr>
            <td class="tcnw">{{.Name}}</td>
            <td class="tcnw">Unique</td>
            <td class="tcnw">{{.Columns}}</td>
            <td class="tcnw"></td>
            <td class="tcnw"></td>
            <td>{{.Comment|safeHTML}}</td>
          </tr>{{end}}`
}

func tpltTableIndexes() string {
	return `
      <table width="100.0%" id="dataTableIdx" class="dataTable">
        <thead>
        <tr>
          <th data-type="string">Name</th>
          <th data-type="string">Columns</th>
          <th data-type="string">Is Unique</th>
          <th data-type="string">Comment</th>
        </tr>
        </thead>
        <tbody>{{range .Indexes}}
          <tr>
            <td class="tcnw">{{.Name}}</td>
            <td class="tcnw">{{.IndexColumns}}</td>
            <td class="tcc">{{.IsUnique|checkMark}}</td>
            <td>{{.Comment|safeHTML}}</td>
          </tr>{{end}}
        </tbody>
      </table>
      <script>
      dataTableIdx.onclick = function(e) {
        sortTable(dataTableIdx, e);
      };
      </script>
      <br />`
}

func tpltTableParentKeys() string {
	return `
      <h3>Parents (references)</h3>
      <table width="100.0%" id="dataTableParent" class="dataTable">
        <thead>
        <tr>
          <th data-type="string">Name</th>
          <th data-type="string">Columns</th>
          <th data-type="string">Is Indexed</th>
          <th data-type="string">Referenced Table</th>
          <th data-type="string">Referenced Columns</th>
          <th data-type="string">On Update</th>
          <th data-type="string">On Delete</th>
          <th data-type="string">Comment</th>
        </tr>
        </thead>
        <tbody>{{range .ParentKeys}}
        <tr>
          <td class="tcnw">{{.Name}}</td>
          <td>{{.TableColumns}}</td>
          <td class="tcc">{{.IsIndexed|checkMark}}</td>
          <td class="tcnw">{{.RefSchemaName}}.<a href="../../{{.RefSchemaName}}/tables/{{.RefTableName}}.html">{{.RefTableName}}</a></td>
          <td>{{.RefTableColumns}}</td>
          <td>{{.UpdateRule}}</td>
          <td>{{.DeleteRule}}</td>
          <td>{{.Comment|safeHTML}}</td>
        </tr>{{end}}
        </tbody>
      </table>
      dataTableParent.onclick = function(e) {
        sortTable(dataTableParent, e);
      };
      <br />`
}

func tpltTableChildKeys() string {
	return `
      <h3>Children (referenced by)</h3>
      <table width="100.0%" id="dataTableChild" class="dataTable">
        <thead>
        <tr>
          <th data-type="string">Name</th>
          <th data-type="string">Columns</th>
          <th data-type="string">Referencing Table</th>
          <th data-type="string">Referencing Columns</th>
          <th data-type="string">Is Indexed</th>
          <th data-type="string">On Update</th>
          <th data-type="string">On Delete</th>
          <th data-type="string">Comment</th>
        </tr>
        </thead>
        <tbody>{{range .ChildKeys}}
        <tr>
          <td class="tcnw">{{.RefConstraintName}}</td>
          <td>{{.RefTableColumns}}</td>
          <td class="tcnw">{{.SchemaName}}.<a href="../../{{.SchemaName}}/tables/{{.TableName}}.html">{{.TableName}}</a></td>
          <td>{{.TableColumns}}</td>
          <td class="tcc">{{.IsIndexed|checkMark}}</td>
          <td>{{.UpdateRule}}</td>
          <td>{{.DeleteRule}}</td>
          <td>{{.Comment|safeHTML}}</td>
        </tr>{{end}}
        </tbody>
      </table>
      <script>
      dataTableChild.onclick = function(e) {
        sortTable(dataTableChild, e);
      };
      </script>
      <br />`

}

//      <h2>Dependencies</h2>
func tpltTableDependencies() string {
	return `
      <h3>Parents (this depends on)</h3>
      <table width="100.0%" id="dataTableTdo" class="dataTable">
        <thead>
        <tr>
          <th data-type="string">Object Schema</th>
          <th data-type="string">Object Name</th>
          <th data-type="string">Object Type</th>
        </tr>
        </thead>
        <tbody>{{range .Dependencies}}
        <tr>
          <td class="tcnw">{{.DepObjectSchema}}</td>
          <td class="tcnw">{{ if .DepIsLinkable }}<a href="../../{{.DepObjectSchema}}/tables/{{.DepObjectName}}.html">{{.DepObjectName}}</a>{{else}}{{.DepObjectName}}{{end}}</td>
          <td class="tcnw">{{.DepObjectType}}</td>
        </tr>{{end}}
        </tbody>
      </table>
      <script>
      dataTableTdo.onclick = function(e) {
        sortTable(dataTableTdo, e);
      };
      </script>
      <br />`

}

func tpltTableDependents() string {
	return `
      <h3>Children (depends on this)</h3>
      <table width="100.0%" id="dataTableDot" class="dataTable">
        <thead>
        <tr>
          <th data-type="string">Object Schema</th>
          <th data-type="string">Object Name</th>
          <th data-type="string">Object Type</th>
        </tr>
        </thead>
        <tbody>{{range .Dependents}}
        <tr>
          <td class="tcnw">{{.ObjectSchema}}</td>
          <td class="tcnw">{{ if .IsLinkable }}<a href="../../{{.ObjectSchema}}/tables/{{.ObjectName}}.html">{{.ObjectName}}</a>{{else}}{{.ObjectName}}{{end}}</td>
          <td class="tcnw">{{.ObjectType}}</td>
        </tr>{{end}}
        </tbody>
      </table>
      <script>
      dataTableDot.onclick = function(e) {
        sortTable(dataTableDot, e);
      };
      </script>
      <br />`
}

func tpltTableFDW() string {
	return `
      <h2>Foreign Data Wrapper</h2>
      <table width="100.0%" id="dataTableFDW" class="dataTable">
        <thead>
        <tr>
          <th data-type="string">Wrapper Name</th>
          <th data-type="string">Server Name</th>
          <th data-type="string">Wrapper Options</th>
          <th data-type="string">Comments</th>
        </tr>
        </thead>
        <tbody>{{range .ForeignWrappers}}
        <tr>
          <td class="tcnw">{{.WrapperName}}</td>
          <td>{{.ServerName}}</td>
          <td>{{.WrapperOptions}}</td>
          <td>{{.Comment|safeHTML}}</td>
        </tr>{{end}}
        </tbody>
      </table>
      <script>
      dataTableFDW.onclick = function(e) {
        sortTable(dataTableFDW, e);
      };
      </script>
      <br />`
}

func tpltTableQuery() string {
	return `
      <pre>
{{.Query}}
      </pre>`
}

func tpltOddHeader() string {
	return reportHead(true, false, false, true) + `
    <div id="pageBody">`
}

func tpltOddTables() string {
	return `
      <table width="100.0%" id="dataTableTab" class="dataTable">
        <thead>
        <tr>
          <th data-type="string">Table</th>
          <th data-type="string">No PK</th>
          <th data-type="string">No indices</th>
          <th data-type="string">Duplicate indices</th>
          <th data-type="string">Only one column</th>
          <th data-type="string">No data</th>
          <th data-type="string">No relationships</th>
          <th data-type="string">Denormalized?</th>
        </tr>
        </thead>
        <tbody>{{range .OddTables}}
        <tr>
          <td><a href="tables/{{.TableName}}.html">{{.TableName}}</a></td>
          <td class="tcc">{{.NoPK|checkMark}}</td>
          <td class="tcc">{{.NoIndices|checkMark}}</td>
          <td class="tcc">{{.DuplicateIndices|checkMark}}</td>
          <td class="tcc">{{.OneColumn|checkMark}}</td>
          <td class="tcc">{{.NoData|checkMark}}</td>
          <td class="tcc">{{.NoRelationships|checkMark}}</td>
          <td class="tcc">{{.Denormalized|checkMark}}</td>
        </tr>{{end}}
        </tbody>
      </table>
      <script>
      dataTableTab.onclick = function(e) {
        sortTable(dataTableTab, e);
      };
      </script>
      <br />`
}

func tpltOddColumns() string {
	return `
      <table width="100.0%" id="dataTableCol" class="dataTable">
        <thead>
        <tr>
          <th data-type="string">Table</th>
          <th data-type="string">Column</th>
          <th data-type="string">Nullable and part of a unique index or constraint</th>
          <th data-type="string">Nullable with a default value</th>
          <th data-type="string">Defaults to NULL or 'NULL'</th>
        </tr>
        </thead>
        <tbody>{{range .OddColumns}}
        <tr>
          <td><a href="tables/{{.TableName}}.html">{{.TableName}}</a></td>
          <td>{{.ColumnName}}</td>
          <td class="tcc">{{.NullUnique|checkMark}}</td>
          <td class="tcc">{{.NullWithDefault|checkMark}}</td>
          <td class="tcc">{{.NullAsDefault|checkMark}}</td>
        </tr>{{end}}
        </tbody>
      </table>
      <script>
      dataTableCol.onclick = function(e) {
        sortTable(dataTableCol, e);
      };
      </script>
      <br />`
}
