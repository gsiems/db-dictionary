package template

import (
	"fmt"

	m "github.com/gsiems/db-dictionary/model"
)

func pageHeader(i int, md *m.MetaData) string {

	b := ""

	switch i {
	case 1, 2:
		ri := ""
		si := ""

		switch i {
		case 1:
			ri = "../"
			si = ""
		case 2:
			ri = "../../"
			si = "../"
		}

		dom := ""
		if len(md.Domains) > 0 {
			dom = `
        <li><a href="` + si + `domains.html">Domains</a></li>`
		}

		b = fmt.Sprintf(`<!DOCTYPE html>
<html>
  <head>
    <meta charset="UTF-8">
    <title>{{.Title}}</title>
    <link rel="stylesheet" href="`+ri+`css/main.css" type="text/css">
    <script type="text/javascript" src="`+ri+`js/filter.js"></script>
  </head>
  <body>
    <div id="NavBar">
      <ul id="navlist">
        <li><a href="`+ri+`index.html">Schemas</a></li>
        <li><a href="`+si+`columns.html">Columns</a></li>
        <li><a href="`+si+`constraints.html">Constraints</a></li>%s
        <li><a href="`+si+`tables.html">Tables</a></li>
        <li><a href="`+si+`odd-things.html">Odd things</a></li>
      </ul>
    </div>`, dom)

	default:
		b = `<!DOCTYPE html>
<html>
  <head>
    <meta charset="UTF-8">
    <title>{{.Title}}</title>
    <link rel="stylesheet" href="css/main.css" type="text/css">
    <script type="text/javascript" src="js/filter.js"></script>
  </head>
  <body>
    <div id="NavBar">
      <ul id="navlist">
        <li><a href="index.html">Schemas</a></li>
      </ul>
    </div>`

	}
	return b
}

func sectionHeader(s string) string {
	return fmt.Sprintf(`
      <h2>%s</h2>`, s)
}

func pageFooter() string {
	return `
    </div>
    <div id="ReportFoot">Generated by <a href="https://github.com/gsiems/db-dictionary">db-dictionary</a></div>
    <br />
  </body>
</html>
`
}

func reportHead(s, t, rc bool) string {

	var schemaTxt string
	var tableTxt string
	var rowCount string

	if s {
		schemaTxt = `
        <tr><th>Schema:</th><td>{{.SchemaName}}</td></tr>{{if .SchemaComment}}
        <tr><td class="TCcomment">{{.SchemaComment|safeHTML}}</td></tr>{{end}}`
	}
	if t {
		tableTxt = `
        <tr><th>Table:</th><td>{{.TableName}}</td></tr>{{if .TableComment}}
        <tr><td class="TCcomment">{{.TableComment|safeHTML}}</td></tr>{{end}}`

	}
	if rc {
		rowCount = `
        <tr><th>Row Count:</th><td>{{.RowCount}}</td></tr>`
	}

	return `
    <div id="ReportHead"><h1>{{.Title}}</h1>
      <table>
        <tr><th>Generated:</th><td>{{.TmspGenerated}}</td></tr>
        <tr><th>Database:</th><td>{{.DBName}}</td></tr>{{if .DBComment}}
        <td class="TCcomment">{{.DBComment|safeHTML}}</td></tr>{{end}}` + schemaTxt + tableTxt + rowCount + `
        <tr><th>Filter:</th><td><form id="filter-form"><input name="filter" id="filterBy" value="" maxlength="32" size="32" type="text" onkeyup="filterTables()"></form></td></tr>
      </table>
    </div>`
}

func tpltSchemas() string {
  return reportHead(false, false, false)+`
    <div id="ReportBody">
      <table width="100.0%" id="dataTable-schema" class="dataTable">
        <thead>
        <tr class="header">
          <th>Schema</th>
          <th>Owner</th>
          <th>Comment</th>
        </tr>
        </thead>
        <tbody>{{range .Schemas}}
          <tr>
            <td class="TC1"><a href="{{.Name}}/tables.html">{{.Name}}</a></td>
            <td class="TC1">{{.Owner}}</td>
            <td class="TCcomment">{{.Comment|safeHTML}}</td>
          </tr>{{end}}
        <tbody>
      </table>
      <br />`
}

func tpltSchemaTables() string {
  return reportHead(true, false, false)+`
    <div id="ReportBody">
      <table width="100.0%" id="dataTable-tab" class="dataTable">
        <thead>
        <tr class="header">
          <th>Table</th>
          <th>Owner</th>
          <th>Type</th>
          <th>Rows</th>
          <th>Comment</th>
        </tr>
        </thead>
        <tbody>{{range .Tables}}
          <tr>
            <td class="TC1"><a href="tables/{{.Name}}.html">{{.Name}}</a></td>
            <td class="TC1">{{.Owner}}</td>
            <td class="TC1">{{.TableType}}</td>
            <td class="TC1">{{.RowCount}}</td>
            <td class="TCcomment">{{.Comment|safeHTML}}</td>
          </tr>{{end}}
        <tbody>
      </table>
      <br />`
}

func tpltSchemaDomains() string {
  return reportHead(true, false, false)+`
    <div id="ReportBody">
      <table width="100.0%" id="dataTable-dom" class="dataTable">
        <thead>
        <tr class="header">
          <th>Name</th>
          <th>Data Type</th>
          <th>Default</th>
          <th>Comment</th>
        </tr>
        </thead>
        <tbody>{{range .Domains}}
          <tr>
            <td class="TC1">{{.Name}}</td>
            <td class="TC1">{{.DataType}}</td>
            <td class="TC1">{{.Default}}</td>
            <td class="TCcomment">{{.Comment|safeHTML}}</td>
          </tr>{{end}}
        <tbody>
      </table>
      <br />`
}

func tpltSchemaColumns() string {
  return reportHead(true, false, false)+`
    <div id="ReportBody">
      <table width="100.0%" id="dataTable-col" class="dataTable">
        <thead>
        <tr class="header">
          <th>Table</th>
          <th>Column</th>
          <th>Ordinal Position</th>
          <th>Data Type</th>
          <th>Nulls</th>
          <th>Default</th>
          <th>Comment</th>
        </tr>
        </thead>
        <tbody>{{range .Columns}}
          <tr>
            <td class="TC1"><a href="tables/{{.TableName}}.html">{{.TableName}}</a></td>
            <td class="TC1">{{.Name}}</td>
            <td class="TC1">{{.OrdinalPosition}}</td>
            <td class="TC1">{{.DataType}}</td>
            <td class="TC1">{{.IsNullable}}</td>
            <td class="TC1">{{.Default}}</td>
            <td class="TCcomment">{{.Comment|safeHTML}}</td>
          </tr>{{end}}
        <tbody>
      </table>
      <br />`
}

func tpltSchemaConstraintsHeader() string {
  return reportHead(true, false, false)+`
    <div id="ReportBody">`
}

func tpltSchemaCheckConstraints() string {
	return `
      <table width="100.0%" id="dataTable-chk" class="dataTable">
        <thead>
        <tr class="header">
          <th>Table</th>
          <th>Constraint</th>
          <th>Search Condition</th>
          <th>Status</th>
          <th>Comment</th>
        </tr>
        </thead>
        <tbody>{{range .CheckConstraints}}
          <tr>
            <td class="TC1"><a href="tables/{{.TableName}}.html">{{.TableName}}</a></td>
            <td class="TC1">{{.Name}}</td>
            <td class="TC1">{{.CheckClause}}</td>
            <td class="TC1">{{.Status}}</td>
            <td class="TCcomment">{{.Comment|safeHTML}}</td>
          </tr>{{end}}
        <tbody>
      </table>
      <br />`
}

func tpltSchemaUniqueConstraints() string {
	return `
      <table width="100.0%" id="dataTable-uniq" class="dataTable">
        <thead>
        <tr class="header">
          <th>Table</th>
          <th>Constraint</th>
          <th>Columns</th>
          <th>Status</th>
          <th>Comment</th>
        </tr>
        </thead>
        <tbody>{{range .UniqueConstraints}}
          <tr>
            <td class="TC1"><a href="tables/{{.TableName}}.html">{{.TableName}}</a></td>
            <td class="TC1">{{.Name}}</td>
            <td class="TC1">{{.Columns}}</td>
            <td class="TC1">{{.Status}}</td>
            <td class="TCcomment">{{.Comment|safeHTML}}</td>
          </tr>{{end}}
        <tbody>
      </table>
      <br />`
}

func tpltSchemaFKConstraints() string {
	return `
      <table width="100.0%" id="dataTable-fk" class="dataTable">
        <thead>
        <tr class="header">
          <th>Table</th>
          <th>Constraint</th>
          <th>Columns</th>
          <th>Is Indexed</th>
          <th>Referenced Table</th>
          <th>Referenced Columns</th>
          <th>On Update</th>
          <th>On Delete</th>
          <th>Comment</th>
        </tr>
        </thead>
        <tbody>{{range .ParentKeys}}
          <tr>
            <td class="TC1"><a href="tables/{{.TableName}}.html">{{.TableName}}</a></td>
            <td class="TC1">{{.Name}}</td>
            <td class="TC1">{{.TableColumns}}</td>
            <td class="TC1">{{.IsIndexed}}</td>
            <td class="TC1">{{.RefSchemaName}}.<a href="../{{.RefSchemaName}}/tables/{{.RefTableName}}.html">{{.RefTableName}}</a>
            <td class="TC1">{{.RefTableColumns}}</td>
            <td class="TC1">{{.UpdateRule}}</td>
            <td class="TC1">{{.DeleteRule}}</td>
            <td class="TCcomment">{{.Comment|safeHTML}}</td>
          </tr>{{end}}
        <tbody>
      </table>
      <br />`
}

func tpltTableHead(tabType string) string {

	switch tabType {
	case "TABLE", "MATERIALIZED VIEW":
		return reportHead(true, true, true)+`
    <div id="ReportBody">`
	}

  return reportHead(true, true, false)+`
    <div id="ReportBody">`

}

func tpltTableColumns(tabType string) string {
	switch tabType {
	case "VIEW", "MATERIALIZED VIEW":
		return `
      <table width="100.0%" id="dataTable-col" class="dataTable">
        <thead>
        <tr class="header">
          <th>Column</th>
          <th>Ordinal Position</th>
          <th>Data Type</th>
          <th>Comment</th>
        </tr>
        </thead>
        <tbody>{{range .Columns}}
          <tr>
            <td class="TC1">{{.Name}}</td>
            <td class="TC1">{{.OrdinalPosition}}</td>
            <td class="TC1">{{.DataType}}</td>
            <td class="TCcomment">{{.Comment|safeHTML}}</td>
          </tr>{{end}}
        <tbody>
      </table>
      <br />`
	default:
		return `
      <table width="100.0%" id="dataTable-col" class="dataTable">
        <thead>
        <tr class="header">
          <th>Column</th>
          <th>Ordinal Position</th>
          <th>Data Type</th>
          <th>Nulls</th>
          <th>Default</th>
          <th>Comment</th>
        </tr>
        </thead>
        <tbody>{{range .Columns}}
          <tr>
            <td class="TC1">{{.Name}}</td>
            <td class="TC1">{{.OrdinalPosition}}</td>
            <td class="TC1">{{.DataType}}</td>
            <td class="TC1">{{.IsNullable}}</td>
            <td class="TC1">{{.Default}}</td>
            <td class="TCcomment">{{.Comment|safeHTML}}</td>
          </tr>{{end}}
        <tbody>
      </table>
      <br />`
	}
}

func tpltTableConstraintsHeader() string {
	return `
      <table width="100.0%" id="dataTable-cons" class="dataTable">
        <thead>
        <tr class="header">
          <th>Name</th>
          <th>Type</th>
          <th>Columns</th>
          <th>Search Condition</th>
          <th>Status</th>
          <th>Comment</th>
        </tr>
        </thead>
        <tbody>`
}

func tpltTableConstraintsFooter() string {
	return `
        </tbody>
      </table>
      <br />`
}

func tpltTableCheckConstraints() string {
	return `{{range .CheckConstraints}}
          <tr>
            <td class="TC2">{{.Name}}</td>
            <td class="TC2">Check</td>
            <td class="TC2"></td>
            <td class="TC2">{{.CheckClause}}</td>
            <td class="TC2">{{.Status}}</td>
            <td class="TCcomment">{{.Comment|safeHTML}}</td>
          </tr>{{end}}`
}

func tpltTablePrimaryKey() string {
	return `{{range .PrimaryKeys}}
          <tr>
            <td class="TC2">{{.Name}}</td>
            <td class="TC2">Primary Key</td>
            <td class="TC2">{{.Columns}}</td>
            <td class="TC2"></td>
            <td class="TC2"></td>
            <td class="TCcomment">{{.Comment|safeHTML}}</td>
          </tr>{{end}}`
}

func tpltTableUniqueConstraints() string {
	return `{{range .UniqueConstraints}}
          <tr>
            <td class="TC2">{{.Name}}</td>
            <td class="TC2">Unique</td>
            <td class="TC2">{{.Columns}}</td>
            <td class="TC2"></td>
            <td class="TC2"></td>
            <td class="TCcomment">{{.Comment|safeHTML}}</td>
          </tr>{{end}}`
}

func tpltTableIndexes() string {
	return `
      <table width="100.0%" id="dataTable-idx" class="dataTable">
        <thead>
        <tr class="header">
          <th>Name</th>
          <th>Columns</th>
          <th>Is Unique</th>
          <th>Comment</th>
        </tr>
        </thead>
        <tbody>{{range .Indexes}}
          <tr>
            <td class="TC2">{{.Name}}</td>
            <td class="TC2">{{.IndexColumns}}</td>
            <td class="TC2">{{.IsUnique}}</td>
            <td class="TCcomment">{{.Comment|safeHTML}}</td>
          </tr>{{end}}
        </tbody>
      </table>
      <br />`
}

func tpltTableParentKeys() string {
	return `
      <p><b>Parents (references)</b></p>
      <table width="100.0%" id="dataTable-parent" class="dataTable">
        <thead>
        <tr class="header">
          <th>Name</th>
          <th>Columns</th>
          <th>Is Indexed</th>
          <th>Referenced Table</th>
          <th>Referenced Columns</th>
          <th>On Update</th>
          <th>On Delete</th>
          <th>Comment</th>
        </tr>
        </thead>
        <tbody>{{range .ParentKeys}}
        <tr>
          <td class="TC2">{{.Name}}</td>
          <td class="TC1">{{.TableColumns}}</td>
          <td class="TC1">{{.IsIndexed}}</td>
          <td class="TC2">{{.RefSchemaName}}.<a href="../../{{.RefSchemaName}}/tables/{{.RefTableName}}.html">{{.RefTableName}}</a></td>
          <td class="TC1">{{.RefTableColumns}}</td>
            <td class="TC1">{{.UpdateRule}}</td>
            <td class="TC1">{{.DeleteRule}}</td>
          <td class="TCcomment">{{.Comment|safeHTML}}</td>
        </tr>{{end}}
        </tbody>
      </table>
      <br />`
}

func tpltTableChildKeys() string {
	return `
      <p><b>Children (referenced by)</b></p>
      <table width="100.0%" id="dataTable-child" class="dataTable">
        <thead>
        <tr class="header">
          <th>Name</th>
          <th>Columns</th>
          <th>Referencing Table</th>
          <th>Referencing Columns</th>
          <th>Is Indexed</th>
          <th>On Update</th>
          <th>On Delete</th>
          <th>Comment</th>
        </tr>
        </thead>
        <tbody>{{range .ChildKeys}}
        <tr>
          <td class="TC2">{{.RefConstraintName}}</td>
          <td class="TC1">{{.RefTableColumns}}</td>
          <td class="TC2">{{.SchemaName}}.<a href="../../{{.SchemaName}}/tables/{{.TableName}}.html">{{.TableName}}</a></td>
          <td class="TC1">{{.TableColumns}}</td>
          <td class="TC2">{{.IsIndexed}}</td>
            <td class="TC1">{{.UpdateRule}}</td>
            <td class="TC1">{{.DeleteRule}}</td>
          <td class="TCcomment">{{.Comment|safeHTML}}</td>
        </tr>{{end}}
        </tbody>
      </table>
      <br />`

}

//      <h2>Dependencies</h2>
func tpltTableDependencies() string {
	return `
      <p><b>Parents (this depends on)</b></p>
      <table width="100.0%" id="dataTable-tdo" class="dataTable">
        <thead>
        <tr class="header">
          <th>Object Schema</th>
          <th>Object Name</th>
          <th>Object Type</th>
        </tr>
        </thead>
        <tbody>{{range .Dependencies}}
        <tr>
          <td class="TC2">{{.DepObjectSchema}}</td>
          <td class="TC2">{{ if or ( or (eq .DepObjectType "TABLE" ) (eq .DepObjectType "VIEW")) ( or (eq .DepObjectType "MATERIALIZED VIEW") (eq .DepObjectType "FOREIGN TABLE")) }}<a href="../../{{.DepObjectSchema}}/tables/{{.DepObjectName}}.html">{{.DepObjectName}}</a>{{else}}{{.DepObjectName}}{{end}}</td>
          <td class="TC2">{{.DepObjectType}}</td>
        </tr>{{end}}
        </tbody>
      </table>
      <br />`

}

func tpltTableDependents() string {
	return `
      <p><b>Children (depends on this)</b></p>
      <table width="100.0%" id="dataTable-dot" class="dataTable">
        <thead>
        <tr class="header">
          <th>Object Schema</th>
          <th>Object Name</th>
          <th>Object Type</th>
        </tr>
        </thead>
        <tbody>{{range .Dependents}}
        <tr>
          <td class="TC2">{{.ObjectSchema}}</td>
          <td class="TC2">{{ if or ( or (eq .ObjectType "TABLE" ) (eq .ObjectType "VIEW")) ( or (eq .ObjectType "MATERIALIZED VIEW") (eq .ObjectType "FOREIGN TABLE")) }}<a href="../../{{.ObjectSchema}}/tables/{{.ObjectName}}.html">{{.ObjectName}}</a>{{else}}{{.ObjectName}}{{end}}</td>
          <td class="TC2">{{.ObjectType}}</td>
        </tr>{{end}}
        </tbody>
      </table>
      <br />`
}

func tpltTableFDW() string {
	return `
      <h2>Foreign Data Wrapper</h2>
      <table width="100.0%" id="dataTable-fdw" class="dataTable">
        <thead>
        <tr class="header">
          <th>Wrapper Name</th>
          <th>Server Name</th>
          <th>Wrapper Options</th>
          <th>Comments</th>
        </tr>
        </thead>
        <tbody>{{range .ForeignWrappers}}
        <tr>
          <td class="TC2">{{.WrapperName}}</td>
          <td class="TC1">{{.ServerName}}</td>
          <td class="TC1">{{.WrapperOptions}}</td>
            <td class="TCcomment">{{.Comment|safeHTML}}</td>
        </tr>{{end}}
        </tbody>
      </table>
      <br />`
}

func tpltTableQuery() string {
	return `
      <pre>
{{.Query}}
      </pre>`
}

func tpltOddHeader() string {
  return reportHead(true, false, false)+`
    <div id="ReportBody">`
}

func tpltOddTables() string {
	return `
      <table width="100.0%" id="dataTable-tab" class="dataTable">
        <thead>
        <tr class="header">
          <th>Table</th>
          <th>No PK</th>
          <th>No indices</th>
          <th>Duplicate indices</th>
          <th>Only one column</th>
          <th>No data</th>
          <th>No relationships</th>
          <th>Denormalized?</th>
        </tr>
        </thead>
        <tbody>{{range .OddTables}}
        <tr>
          <td class="TC1"><a href="tables/{{.TableName}}.html">{{.TableName}}</a></td>
          <td class="TCc">{{.NoPK}}</td>
          <td class="TCc">{{.NoIndices}}</td>
          <td class="TCc">{{.DuplicateIndices}}</td>
          <td class="TCc">{{.OneColumn}}</td>
          <td class="TCc">{{.NoData}}</td>
          <td class="TCc">{{.NoRelationships}}</td>
          <td class="TCc">{{.Denormalized}}</td>
        </tr>{{end}}
        </tbody>
      </table>
      <br />`
}

func tpltOddColumns() string {
	return `
      <table width="100.0%" id="dataTable-col" class="dataTable">
        <thead>
        <tr class="header">
          <th>Table</th>
          <th>Column</th>
          <th>Nullable and part of a unique index or constraint</th>
          <th>Nullable with a default value</th>
          <th>Defaults to NULL or 'NULL'</th>
        </tr>
        </thead>
        <tbody>{{range .OddColumns}}
        <tr>
          <td class="TC1"><a href="tables/{{.TableName}}.html">{{.TableName}}</a></td>
          <td class="TC1">{{.ColumnName}}</td>
          <td class="TCc">{{.NullUnique}}</td>
          <td class="TCc">{{.NullWithDefault}}</td>
          <td class="TCc">{{.NullAsDefault}}</td>
        </tr>{{end}}
        </tbody>
      </table>
      <br />`
}
